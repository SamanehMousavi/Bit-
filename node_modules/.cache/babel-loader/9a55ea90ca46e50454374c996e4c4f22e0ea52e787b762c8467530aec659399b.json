{"ast":null,"code":"var _jsxFileName = \"/Users/samanehmousavi/Desktop/concordia-bootcamp/Final Project/client/src/components/ProjectManagerTool/Bdnd.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"./styles.css\";\nimport Column from \"./Components/Column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reorder = (source, destination, taskDataArr) => {\n  console.log(\"reorder => \", source, destination, taskDataArr);\n  let taskData = [...taskDataArr];\n\n  //     //_____________________________________________________________Source data\n  let sourceGroupIndex = taskData.findIndex((val, index) => {\n    // iterate and find \"Today\" (or other) index in list data\n    return val.groupName === source.droppableId;\n  });\n  let draggedTask = taskData[sourceGroupIndex].tasks.find((val, index) => {\n    // Get specific task object based on index\n    return source.index === index;\n  }); // dragged object\n\n  let sourceListCopyWithElementRemoved = taskData[sourceGroupIndex].tasks.filter((val, index) => {\n    return index !== source.index; // removes dragged element from array\n  });\n\n  // //__________________________________________________________________Destination data\n\n  let destinationGroupIndex = taskData.findIndex((val, index) => {\n    // iterate and find \"Tomorrow\" (or other) index in list data\n    return val.groupName === destination.droppableId;\n  });\n  taskData[destinationGroupIndex].tasks.splice(destination.index, 0, draggedTask); // insert dragged item to new place\n  taskData[sourceGroupIndex].tasks = sourceListCopyWithElementRemoved;\n  return taskData;\n};\nfunction App() {\n  _s();\n  let initialState = [{\n    groupName: \"Today\",\n    tasks: [{\n      id: \"1\",\n      title: \"Test-1\"\n    }, {\n      id: \"2\",\n      title: \"Test-2\"\n    }]\n  }, {\n    groupName: \"Tomorrow\",\n    tasks: [{\n      id: \"3\",\n      title: \"Test-3\"\n    }, {\n      id: \"4\",\n      title: \"Test-4\"\n    }]\n  }];\n  const [taskList, setTasks] = useState(initialState);\n  function onDragEnd(val) {\n    // Your version\n    // let result = helper.reorder(val.source, val.destination, taskList);\n    // setTasks(result);\n\n    /// A different way!\n    const {\n      draggableId,\n      source,\n      destination\n    } = val;\n    const [sourceGroup] = taskList.filter(column => column.groupName === source.droppableId);\n\n    // Destination might be `null`: when a task is\n    // dropped outside any drop area. In this case the\n    // task reamins in the same column so `destination` is same as `source`\n    const [destinationGroup] = destination ? taskList.filter(column => column.groupName === destination.droppableId) : {\n      ...sourceGroup\n    };\n\n    // We save the task we are moving\n    const [movingTask] = sourceGroup.tasks.filter(t => t.id === draggableId);\n    const newSourceGroupTasks = sourceGroup.tasks.splice(source.index, 1);\n    const newDestinationGroupTasks = destinationGroup.tasks.splice(destination.index, 0, movingTask);\n\n    // Mapping over the task lists means that you can easily\n    // add new columns\n    const newTaskList = taskList.map(column => {\n      if (column.groupName === source.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newSourceGroupTasks\n        };\n      }\n      if (column.groupName === destination.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newDestinationGroupTasks\n        };\n      }\n      return column;\n    });\n    setTasks(newTaskList);\n  }\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        className: \"column\",\n        droppableId: \"Today\",\n        list: taskList[0].tasks,\n        type: \"TASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        className: \"column\",\n        droppableId: \"Tomorrow\",\n        list: taskList[1].tasks,\n        type: \"TASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" context hello world \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lOPypuOYCJo0iKzoTHxCZPrasRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DragDropContext","Column","jsxDEV","_jsxDEV","reorder","source","destination","taskDataArr","console","log","taskData","sourceGroupIndex","findIndex","val","index","groupName","droppableId","draggedTask","tasks","find","sourceListCopyWithElementRemoved","filter","destinationGroupIndex","splice","App","_s","initialState","id","title","taskList","setTasks","onDragEnd","draggableId","sourceGroup","column","destinationGroup","movingTask","t","newSourceGroupTasks","newDestinationGroupTasks","newTaskList","map","children","className","list","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samanehmousavi/Desktop/concordia-bootcamp/Final Project/client/src/components/ProjectManagerTool/Bdnd.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"./styles.css\";\n\nimport Column from \"./Components/Column\";\n\nconst reorder = (source, destination, taskDataArr) => {\n  console.log(\"reorder => \", source, destination, taskDataArr);\n  let taskData = [...taskDataArr];\n\n  //     //_____________________________________________________________Source data\n  let sourceGroupIndex = taskData.findIndex((val, index) => {\n    // iterate and find \"Today\" (or other) index in list data\n    return val.groupName === source.droppableId;\n  });\n\n  let draggedTask = taskData[sourceGroupIndex].tasks.find((val, index) => {\n    // Get specific task object based on index\n    return source.index === index;\n  }); // dragged object\n\n  let sourceListCopyWithElementRemoved = taskData[\n    sourceGroupIndex\n  ].tasks.filter((val, index) => {\n    return index !== source.index; // removes dragged element from array\n  });\n\n  // //__________________________________________________________________Destination data\n\n  let destinationGroupIndex = taskData.findIndex((val, index) => {\n    // iterate and find \"Tomorrow\" (or other) index in list data\n    return val.groupName === destination.droppableId;\n  });\n\n  taskData[destinationGroupIndex].tasks.splice(\n    destination.index,\n    0,\n    draggedTask\n  ); // insert dragged item to new place\n  taskData[sourceGroupIndex].tasks = sourceListCopyWithElementRemoved;\n\n  return taskData;\n};\nfunction App() {\n  let initialState = [\n    {\n      groupName: \"Today\",\n      tasks: [\n        { id: \"1\", title: \"Test-1\" },\n        { id: \"2\", title: \"Test-2\" },\n      ],\n    },\n    {\n      groupName: \"Tomorrow\",\n      tasks: [\n        { id: \"3\", title: \"Test-3\" },\n        { id: \"4\", title: \"Test-4\" },\n      ],\n    },\n  ];\n\n  const [taskList, setTasks] = useState(initialState);\n\n  function onDragEnd(val) {\n    // Your version\n    // let result = helper.reorder(val.source, val.destination, taskList);\n    // setTasks(result);\n\n    /// A different way!\n    const { draggableId, source, destination } = val;\n\n    const [sourceGroup] = taskList.filter(\n      (column) => column.groupName === source.droppableId\n    );\n\n    // Destination might be `null`: when a task is\n    // dropped outside any drop area. In this case the\n    // task reamins in the same column so `destination` is same as `source`\n    const [destinationGroup] = destination\n      ? taskList.filter(\n          (column) => column.groupName === destination.droppableId\n        )\n      : { ...sourceGroup };\n\n    // We save the task we are moving\n    const [movingTask] = sourceGroup.tasks.filter((t) => t.id === draggableId);\n\n    const newSourceGroupTasks = sourceGroup.tasks.splice(source.index, 1);\n    const newDestinationGroupTasks = destinationGroup.tasks.splice(\n      destination.index,\n      0,\n      movingTask\n    );\n\n    // Mapping over the task lists means that you can easily\n    // add new columns\n    const newTaskList = taskList.map((column) => {\n      if (column.groupName === source.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newSourceGroupTasks,\n        };\n      }\n      if (column.groupName === destination.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newDestinationGroupTasks,\n        };\n      }\n      return column;\n    });\n    setTasks(newTaskList);\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"wrapper\">\n        <Column\n          className=\"column\"\n          droppableId=\"Today\"\n          list={taskList[0].tasks}\n          type=\"TASK\"\n        />\n        <Column\n          className=\"column\"\n          droppableId=\"Tomorrow\"\n          list={taskList[1].tasks}\n          type=\"TASK\"\n        />\n        <div> context hello world </div>\n      </div>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}